# Import Packages & Data

```{python}
import pandas as pd
import numpy as np
import itertools

uconn_data = pd.read_csv('data/in-game-trackman/final_fall_stats.csv')
```

# Data Cleaning & Necessary Information

## Cleaning

```{python}
uconn_data['Name'] = uconn_data['First'] + ' ' + uconn_data['Last']
uconn_data.drop(columns = ['First', 'Last'], inplace = True)

req_data = uconn_data[['Name', 'Prob1B', 'Prob2B', 'Prob3B', 'Prob4B', 'ProbOut']]
```

## Set Player Positions & Starters

```{python}
# players per position
catcher = ['Matt Garbowski', 'Connor Lane', 'Mike Oates', 'Gabriel Tirado']
first_b = ['Maddix Dalena', 'Grant MacArthur', 'Gabriel Tirado']
second_b = ['Ryan Daniels', 'Jack LaRose', 'Bryan Padilla', 'Rob Rispoli']
third_b = ['Tyler Minick', 'Bryan Padilla', 'Jack LaRose']
ss = ['Anthony Belisario', 'Bryan Padilla', 'Rob Rispoli']
left = ['Sam Biller', 'Carter Groen', 'Drew Kron', 'Beau Root', 'Aidan Dougherty']
right = ['Sam Biller', 'Aidan Dougherty', 'Carter Groen', 'Caleb Shpur', 'Drew Kron']
center = ['Sam Biller', 'Drew Kron', 'Beau Root', 'Caleb Shpur']
dh = ['Maddix Dalena', 'Ryan Daniels', 'Matt Garbowski', 'Carter Groen', 'Tyler Minick']

# definite starters
starters = ['Matt Garbowski', 'Maddix Dalena', 'Bryan Padilla', 'Ryan Daniels',
                            'Tyler Minick', 'Caleb Shpur', 'Sam Biller', 'Rob Rispoli']
```

## Probabilities & Simulation Preparation

```{python}
# probability assumptions
prob_2ndtohome_single = 0.60
prob_1sttohome_double = 0.45
prob_2to3_double = 0.10

num_games = 100
```

# Monte-Carlo Simulation

```{python}
sample = np.random.choice([0, 1, 2, 3, 4], size = 1, p = [0.4, 0.2, 0.1, 0.1, 0.2])

skeleton_cols = ['Batter', 'Prob1st', 'Prob2nd', 'Prob3rd', 'ProbHome','ProbOut',
                'Result', 'Inning', 'Outs', 'Runner1', 'Runner2', 'Runner3', 'Runs']

skeleton_data = pd.DataFrame(data = [[None] * 13 for _ in range(81)], 
                                                    columns = skeleton_cols)
```

```{python}
lookup_table = pd.DataFrame({'Number_for_Player': range(1, 20), 
                                        'Player_Name': req_data['Name']})

lookup_table
```

```{python}
c_nums = np.empty(len(catcher))
first_nums = np.empty(len(first_b))
second_nums = np.empty(len(second_b))
third_nums = np.empty(len(third_b))
short_nums = np.empty(len(ss))
left_nums = np.empty(len(left))
center_nums = np.empty(len(center))
right_nums = np.empty(len(right))
dh_nums = np.empty(len(dh))

def fill_lookup(pos, pos_lst):
    for i in range(len(pos_lst)):
        try:
            pos_lst[i] = lookup_table['Player_Name'].tolist().index(pos[i]) + 1
        except ValueError:
            pos_lst[i] = np.nan

fill_lookup(catcher, c_nums)
fill_lookup(first_b, first_nums)
fill_lookup(second_b, second_nums)
fill_lookup(third_b, third_nums)
fill_lookup(ss, short_nums)
fill_lookup(left, left_nums)
fill_lookup(center, center_nums)
fill_lookup(right, right_nums)
fill_lookup(dh, dh_nums)
```

```{python}
comb_grid = pd.DataFrame(
    itertools.product(c_nums, first_nums, second_nums, third_nums, short_nums, 
                                    left_nums, right_nums, center_nums, dh_nums),
    columns=['C_Numbers', 'First_Numbers', 'Second_Numbers', 'Short_Numbers', 
             'Third_Numbers', 'LF_Numbers', 'RF_Numbers', 'CF_Numbers', 'DH_Numbers']
)

comb_grid = comb_grid.values
cols = ['C_Numbers', 'First_Numbers', 'Second_Numbers', 'Short_Numbers', 'Third_Numbers',
                                    'LF_Numbers', 'RF_Numbers', 'CF_Numbers', 'DH_Numbers']

comb_grid = pd.DataFrame(comb_grid, columns = cols)

comb_grid['TestingColumn'] = 'tmp'

comb_grid['TestingColumn'] = comb_grid.iloc[:, :9].apply(lambda row: len(set(row)), axis=1)

comb_grid = comb_grid[comb_grid['TestingColumn'] == 9]
```